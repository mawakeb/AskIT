package nl.tudelft.oopp.demo.data;

import java.util.Objects;
import java.util.UUID;

public class Question {

    /**
     * Note: this is a different class than Question.java on the server
     * But because these attributes are a subset of that one,
     * a client Question can be deserialized from a server Question in JSON format
     */
    private final UUID id;
    private final String content;
    private final int upvotes;

    /**
     * Constructor for the Question class.
     *
     * @param id      unique UUID generated by the server.
     * @param content the text content of the question.
     * @param upvotes the current number of up-votes that the question has.
     */
    public Question(UUID id, String content, int upvotes) {
        this.id = id;
        this.content = content;
        this.upvotes = upvotes;
    }

    /**
     * Constructor for the Question class that generates an id.
     *
     * @param content the text content of the question.
     * @param upvotes the current number of up-votes that the question has.
     */
    public Question(String content, int upvotes) {
        this.id = UUID.randomUUID();
        this.content = content;
        this.upvotes = upvotes;
    }

    public UUID getId() {
        return id;
    }

    public String getContent() {
        return content;
    }

    public int getUpvotes() {
        return upvotes;
    }

    @Override
    public String toString() {
        return getContent();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Question question = (Question) o;
        return id.equals(question.id)
                && upvotes == question.upvotes
                && Objects.equals(content, question.content);
    }
}
